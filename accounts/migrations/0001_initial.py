# Generated by Django 5.0.4 on 2025-07-01 13:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('items', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='自己紹介')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='生年月日')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='プロフィール画像')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='所持ポイント')),
                ('total_earned_points', models.PositiveIntegerField(default=0, verbose_name='累計獲得ポイント')),
                ('is_premium', models.BooleanField(default=False, verbose_name='プレミアム会員')),
                ('notification_enabled', models.BooleanField(default=True, verbose_name='通知設定')),
                ('questions_count', models.PositiveIntegerField(default=0, verbose_name='質問数')),
                ('answers_count', models.PositiveIntegerField(default=0, verbose_name='回答数')),
                ('helpful_answers_count', models.PositiveIntegerField(default=0, verbose_name='役立った回答数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'ユーザー',
                'verbose_name_plural': 'ユーザー',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PointHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='ポイント変動')),
                ('reason', models.CharField(max_length=200, verbose_name='理由')),
                ('balance_after', models.PositiveIntegerField(verbose_name='変動後残高')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ポイント履歴',
                'verbose_name_plural': 'ポイント履歴',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clothing_sizes', models.JSONField(blank=True, default=dict, verbose_name='服のサイズ')),
                ('shoe_sizes', models.JSONField(blank=True, default=dict, verbose_name='靴のサイズ')),
                ('budget_min', models.PositiveIntegerField(default=0, verbose_name='最小予算')),
                ('budget_max', models.PositiveIntegerField(default=100000, verbose_name='最大予算')),
                ('style_preferences', models.JSONField(blank=True, default=list, verbose_name='スタイル好み')),
                ('color_preferences', models.JSONField(blank=True, default=list, verbose_name='色の好み')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('preferred_brands', models.ManyToManyField(blank=True, to='items.brand', verbose_name='好きなブランド')),
                ('preferred_categories', models.ManyToManyField(blank=True, to='items.category', verbose_name='好きなカテゴリ')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preference', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ユーザー好み',
                'verbose_name_plural': 'ユーザー好み',
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=200, verbose_name='おすすめ理由')),
                ('score', models.FloatField(default=0.0, verbose_name='おすすめスコア')),
                ('is_viewed', models.BooleanField(default=False, verbose_name='閲覧済み')),
                ('is_liked', models.BooleanField(default=False, verbose_name='いいね')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='items.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'おすすめ商品',
                'verbose_name_plural': 'おすすめ商品',
                'ordering': ['-score', '-created_at'],
                'unique_together': {('user', 'item')},
            },
        ),
    ]
